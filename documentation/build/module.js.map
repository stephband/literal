{
  "version": 3,
  "sources": ["https://cdn.jsdelivr.net/gh/stephband/fn@master/modules/cache.js", "https://cdn.jsdelivr.net/gh/stephband/fn@master/modules/curry.js", "https://cdn.jsdelivr.net/gh/stephband/fn@master/modules/get.js", "https://cdn.jsdelivr.net/gh/stephband/dom@master/modules/classes.js", "https://cdn.jsdelivr.net/gh/stephband/bolt-2@main/classes/device.js"],
  "sourcesContent": ["/**\ncache(fn)\nReturns a function that caches the output values of `fn(input)` against input\nvalues in a map, such that for each input value `fn` is only ever called once.\n*/\n\nlet warned;\n\nexport default function cacheByObject(fn) {\n    var map = new Map();\n\n    return function cache(object) {\n        if (window.DEBUG && !warned && object === undefined) {\n            warned = true;\n            console.warn('cache() called with undefined. Not illegal, but potentially bad.');\n        }\n\n        if (window.DEBUG && arguments.length > 1) {\n            console.warn('cache() called with ' + arguments.length + ' arguments. Accepts exactly 1.');\n        }\n\n        if (map.has(object)) {\n            return map.get(object);\n        }\n\n        var value = fn(object);\n        map.set(object, value);\n        return value;\n    };\n}\n", "/**\ncurry(fn [, muteable, arity])\nReturns a function that wraps `fn` and makes it partially applicable.\n*/\n\nimport cache from './cache.js';\n\nconst A     = Array.prototype;\n\nfunction applyFn(fn, args) {\n    return typeof fn === 'function' ? fn.apply(null, args) : fn ;\n}\n\nfunction curry(fn, muteable, arity) {\n    arity = arity || fn.length;\n\n    var memo = arity === 1 ?\n        // Don't cache if `muteable` flag is true\n        muteable ? fn : cache(fn) :\n\n        // It's ok to always cache intermediate memos, though\n        cache(function(object) {\n            return curry(function() {\n                var args = [object];\n                args.push.apply(args, arguments);\n                return fn.apply(null, args);\n            }, muteable, arity - 1) ;\n        }) ;\n\n    return function partial(object) {\n        return arguments.length === 0 ?\n            partial :\n        arguments.length === 1 ?\n            memo(object) :\n        arguments.length >= arity ?\n            fn.apply(null, arguments) :\n        // This is bad, I think. We don't want [[fn],[fn]].map(get(0)) to be firing the fns\n        //arguments.length > arity ?\n        //    applyFn(fn.apply(null, A.splice.call(arguments, 0, arity)), arguments) :\n        applyFn(memo(object), A.slice.call(arguments, 1)) ;\n    };\n}\n\n//function curry(fn, muteable, arity) {\n//    arity = arity || fn.length;\n//    return function curried() {\n//        return arguments.length >= arity ?\n//            fn.apply(null, arguments) :\n//            curried.bind(null, ...arguments) ;\n//    };\n//}\n\nif (window.DEBUG) {\n    const _curry = curry;\n\n    // Feature test\n\tconst isFunctionLengthDefineable = (function() {\n\t\tvar fn = function() {};\n\n\t\ttry {\n\t\t\t// Can't do this on Safari - length non configurable :(\n\t\t\tObject.defineProperty(fn, 'length', { value: 2 });\n\t\t}\n\t\tcatch(e) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn fn.length === 2;\n\t})();\n\n    const setFunctionProperties = function setFunctionProperties(text, parity, fn1, fn2) {\n        // Make the string representation of fn2 display parameters of fn1\n        fn2.toString = function() {\n            return /function\\s*[\\w\\d]*\\s*\\([,\\w\\d\\s]*\\)/.exec(fn1.toString()) + ' { [' + text + '] }';\n        };\n\n        // Where possible, define length so that curried functions show how\n        // many arguments they are yet expecting\n        if (isFunctionLengthDefineable) {\n            Object.defineProperty(fn2, 'length', { value: parity });\n        }\n\n        return fn2;\n    };\n\n    // Make curried functions log a pretty version of their partials\n    curry = function curry(fn, muteable, arity) {\n        arity  = arity || fn.length;\n        return setFunctionProperties('curried', arity, fn, _curry(fn, muteable, arity));\n    };\n}\n\n\nexport default curry;\n", "\n/**\nget(name, object)\nGet property `name` of `object`.\n*/\n\nimport curry from './curry.js';\n\nexport function get(key, object) {\n    // Todo? Support WeakMaps and Maps and other map-like objects with a\n    // get method - but not by detecting the get method\n    return object[key];\n}\n\nexport default curry(get, true);\n", "\n/**\nclasses(node)\nReturns the classList of `node`.\n*/\n\nimport curry from 'fn/curry.js';\nimport get   from 'fn/get.js';\n\nconst classes = get('classList');\n\nexport default classes;\n\n/**\naddClass(class, node)\nAdds `'class'` to the classList of `node`.\n*/\n\nfunction _addClass(string, node) {\n\tclasses(node).add(string);\n}\n\n/**\nremoveClass(class, node)\nRemoves `'class'` from the classList of `node`.\n*/\n\nfunction _removeClass(string, node) {\n\tclasses(node).remove(string);\n}\n\nfunction requestFrame(n, fn) {\n\t// Requst frames until n is 0, then call fn\n\t(function frame(t) {\n\t\treturn n-- ?\n\t\t\trequestAnimationFrame(frame) :\n\t\t\tfn(t);\n\t})();\n}\n\nfunction _frameClass(string, node) {\n\tvar list = classes(node);\n\tlist.add(string);\n\n\t// Chrome (at least) requires 2 frames - I guess in the first, the\n\t// change is painted so we have to wait for the second to undo\n\trequestFrame(2, () => list.remove(string));\n}\n\nexport const addClass    = curry(_addClass, true);\nexport const removeClass = curry(_removeClass, true);\nexport const frameClass  = curry(_frameClass, true);\n", "\n// Adds a class to the document root depending on the last input device\n// used, enabling you to set :focus and :hover styles depending on the type of\n// input responible for them. Hopefully. Not foolproof, but better than getting\n// rid of focus outlines altogether.\n\nimport classes from 'dom/classes.js';\n\nexport const config = {\n    simulatedEventDelay: 0.08,\n    keyClass:   'key-device',\n    mouseClass: 'mouse-device',\n    touchClass: 'touch-device',\n    keyType:    'key',\n    mouseType:  'mouse',\n    touchType:  'touch'\n};\n\nexport const device = {\n    type: 'mouse'\n};\n\nvar list       = classes(document.documentElement);\nvar currentClass, timeStamp;\n\nfunction updateClass(newClass) {\n    // We are already in mouseClass state, nothing to do\n    if (currentClass === newClass) { return; }\n    list.remove(currentClass);\n    list.add(newClass);\n    currentClass = newClass;\n}\n\nfunction mousedown(e) {\n    // If we are within simulatedEventDelay of a touchend event, ignore\n    // mousedown as it's likely a simulated event. Reset timeStamp to\n    // gaurantee that we only block one mousedown at most.\n    if (e.timeStamp < timeStamp + config.simulatedEventDelay * 1000) { return; }\n    timeStamp = undefined;\n    updateClass(config.mouseClass);\n    device.type = config.mouseType;\n}\n\nfunction keydown(e) {\n    // If key is not tab, enter or escape do nothing\n    if ([\"ArrowDown\", \"ArrowUp\", \"ArrowRight\", \"ArrowLeft\", \"Space\", \"Escape\", \"Tab\"].indexOf(e.code) === -1) { return; }\n    updateClass(config.keyClass);\n    device.type = config.keyType;\n    timeStamp = e.timeStamp;\n}\n\nfunction touchend(e) {\n    timeStamp = e.timeStamp;\n    updateClass(config.touchClass);\n    device.type = config.touchType;\n}\n\ndocument.addEventListener('mousedown', mousedown);\ndocument.addEventListener('keydown', keydown);\ndocument.addEventListener('touchend', touchend);\n"],
  "mappings": "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",
  "names": ["cacheByObject", "fn", "map", "object", "value", "A", "applyFn", "fn", "args", "curry", "muteable", "arity", "memo", "cacheByObject", "object", "partial", "curry_default", "get", "key", "object", "get_default", "curry_default", "classes", "get_default", "classes_default", "_addClass", "string", "node", "_removeClass", "requestFrame", "n", "fn", "frame", "t", "_frameClass", "list", "addClass", "curry_default", "removeClass", "frameClass", "config", "device", "list", "classes_default", "currentClass", "timeStamp", "updateClass", "newClass", "mousedown", "keydown", "touchend"]
}
